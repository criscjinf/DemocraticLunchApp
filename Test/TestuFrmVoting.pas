unit TestuFrmVoting;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.Variants, uEmployees, Winapi.Windows, Vcl.Dialogs, Vcl.Forms,
  Vcl.ExtCtrls, Vcl.Controls, System.Classes, System.SysUtils, Winapi.Messages,
  uCustomEditHelper, uFrmVoting, Vcl.Graphics, Vcl.Mask, Vcl.StdCtrls, uFrmBase,
  Vcl.ComCtrls, Vcl.DBCtrls, uJsonObjectHelper, uApiDemocraticLunchConstants,
  Data.DBXJSON, uObjectBaseApi, uFrameVote, uVoting, uApiConsumption;

type
  // Test methods for class TFrmVoting

  TestTFrmVoting = class(TTestCase)
  strict private
    FFrmVoting: TFrmVoting;
  public
    procedure SetUp; override;
    procedure TearDown; override;
    procedure TestbtnNextClick;
    procedure TestedtCPFExit;
    procedure TestFormClose;
    procedure TestFormCreate;
    procedure TestFormShow;
    procedure TestEnableCtrls;
    procedure TestEditValidateError;
    procedure TestValidateEmployer;
    procedure TestNextStep;
    procedure TestValidateVotingDate;
    procedure TestUnselectEmployer;
    procedure TestHideTabControls;
    procedure TestLoadCurrentVoting;
    procedure TestConfigureFrameVote;
    procedure TestStartNewVoting;
    procedure TestUpdateVotingData;
    procedure TestEnableNext;
  published
    procedure TestedtCPFTrue;
    procedure TestedtCPFFalse;
    procedure TestSelectEmployer;
    procedure TestRegisterUpdateEmployer;
  end;

implementation

procedure TestTFrmVoting.SetUp;
begin
  FFrmVoting := TFrmVoting.Create(nil);
end;

procedure TestTFrmVoting.TearDown;
begin
  FFrmVoting.Free;
  FFrmVoting := nil;
end;


procedure TestTFrmVoting.TestedtCPFTrue;
begin
  FFrmVoting.edtCPF.Text:= '1';

end;

procedure TestedtCPFFalse;
begin

end;

procedure TestTFrmVoting.TestSelectEmployer;
var
  pCpf: string;
begin
  // TODO: Setup method call parameters
  FFrmVoting.SelectEmployer(pCpf);
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestRegisterUpdateEmployer;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FFrmVoting.RegisterUpdateEmployer;
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestbtnNextClick;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrmVoting.btnNextClick(Sender);
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestedtCPFExit;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrmVoting.edtCPFExit(Sender);
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestFormClose;
var
  Action: TCloseAction;
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrmVoting.FormClose(Sender, Action);
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestFormCreate;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrmVoting.FormCreate(Sender);
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestFormShow;
var
  Sender: TObject;
begin
  // TODO: Setup method call parameters
  FFrmVoting.FormShow(Sender);
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestEnableCtrls;
var
  pEnabled: Boolean;
begin
  // TODO: Setup method call parameters
  FFrmVoting.EnableCtrls(pEnabled);
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestEditValidateError;
var
  pMsg: string;
  pCaption: string;
  pEdit: TCustomEdit;
begin
  // TODO: Setup method call parameters
  FFrmVoting.EditValidateError(pEdit, pCaption, pMsg);
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestValidateEmployer;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FFrmVoting.ValidateEmployer;
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestNextStep;
begin
  FFrmVoting.NextStep;
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestValidateVotingDate;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FFrmVoting.ValidateVotingDate;
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestUnselectEmployer;
begin
  FFrmVoting.UnselectEmployer;
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestHideTabControls;
begin
  FFrmVoting.HideTabControls;
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestLoadCurrentVoting;
begin
  FFrmVoting.LoadCurrentVoting;
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestConfigureFrameVote;
begin
  FFrmVoting.ConfigureFrameVote;
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestStartNewVoting;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FFrmVoting.StartNewVoting;
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestUpdateVotingData;
begin
  FFrmVoting.UpdateVotingData;
  // TODO: Validate method results
end;

procedure TestTFrmVoting.TestEnableNext;
var
  pEnabled: Boolean;
begin
  // TODO: Setup method call parameters
  FFrmVoting.EnableNext(pEnabled);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFrmVoting.Suite);
end.

