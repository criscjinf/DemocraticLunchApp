unit TestuRestaurants;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, uObjectBaseApi, System.Generics.Collections,
  uJsonObjectHelper, DateUtils, Classes, Data.DBXJSON, uApiDemocraticLunchConstants,
  uRestaurants, uApiConsumption;

type
  // Test methods for class TRestaurants

  TestTRestaurants = class(TTestCase)
  strict private
    FRestaurants: TRestaurants;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIntegrations;
  end;

implementation

procedure TestTRestaurants.SetUp;
begin
  TApiConsumption.GetInstance.URL:= CS_URL_API;
  FRestaurants := TRestaurants.Create;
  FRestaurants.DeleteAll();
end;

procedure TestTRestaurants.TearDown;
begin
  FRestaurants.Free;
  FRestaurants := nil;
end;

procedure TestTRestaurants.TestIntegrations;
var
  ReturnValue: TJSONObject;
  pNewPhone: string;
  sID: string;
begin
  FRestaurants.AddParam(CS_FIELD_NAME , '');
  try
    FRestaurants.New;
    Check(False, 'Enviadas informações inválidas no cadastro de restaurantes e não retornou erro');
  except
    on e: ApiException do
    begin
      Check(True, 'Deve receber uma exceção da api a tentar enviar informações inválidas');
    end;
    on e: Exception do
    begin
      Check(False, 'Recebeu um erro que não veio da api ao tentar realizar um cadastro de restaurantes');
    end;
  end;

  FRestaurants.AddParam(CS_FIELD_NAME   , 'Teste');
  FRestaurants.AddParam(CS_FIELD_ADDRESS, 'Rua teste');
  FRestaurants.AddParam(CS_FIELD_PHONE  , '(99)99999-9999');

  ReturnValue:= FRestaurants.New;
  sID        :=  ReturnValue.AsString(CS_FIELD_ID);
  CheckTrue(Assigned(ReturnValue), 'Deve criar um novo restaurantes na api e retornar o objeto com os dados');

  pNewPhone := '(88)88888-8888';
  FRestaurants.AddParam(CS_FIELD_NAME   , 'Teste');
  FRestaurants.AddParam(CS_FIELD_ADDRESS, 'Rua teste');
  FRestaurants.AddParam(CS_FIELD_PHONE  , pNewPhone);


  ReturnValue := FRestaurants.Update(sID);

  CheckTrue(Assigned(ReturnValue) and (ReturnValue.AsString(CS_FIELD_PHONE) = pNewPhone),
    'Deve atualizar as informações do usuário na api e retornar o objeto com os dados do funcionário');
  FRestaurants.Delete(sID);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTRestaurants.Suite);
end.

